---
- name: create a VPC 
  amazon.aws.ec2_vpc_net:
    profile: "{{ aws_profile }}"
    state: present
    name: "ansible-vpc"
    cidr_block: 10.0.0.0/16
    tenancy: default
    tags:
      demo: Ansible 
  register: demo_vpc

- name: Create Internet Gateway for VPC  
  community.aws.ec2_vpc_igw:
    profile: "{{ aws_profile }}"
    state: present
    vpc_id: "{{ demo_vpc.vpc.id }}"
    tags:
      Name: "ansible-vpc-igw"
      demo: Ansible 
  register: gateway

- name: Create security group internal
  amazon.aws.ec2_group: 
    profile: "{{ aws_profile }}"
    state: present
    name: "ansible-sec-group"
    description: Inbound WinRM and RDP, http for demo servers and internal AD ports 
    rules:
      - proto: tcp 
        ports:
          - 80 # HTTP
          - 443 # HTTPS
          - 22 # SSH
          - 8443 # needed for SSO because reasons apparently
          - 27199 # Ansible Default Receptor Port 
        cidr_ip: 0.0.0.0/0
      - proto: icmp
        to_port: -1
        from_port: -1
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        ports: 
          - 80
          - 5986 # WinRM
          - 3389 # RDP
          - 53 # DNS
          - 88 # Kerberos Authentication
          - 135 # RPC
          - 139 # Netlogon 
          - 389 # LDAP 
          - 445 # SMB
          - 464 # Kerberos Authentication
          - 5432 # PostgreSQL
          - 636 # LDAPS (LDAP over TLS)
          - 873 # Rsync 
          - 27199 # Ansible Default Receptor Port 
          - 3268-3269 # Global Catalog 
          - 1024-65535 # Ephemeral RPC ports
        cidr_ip: 10.0.0.0/16
      - proto: udp 
        ports: 
          - 53 # DNS
          - 88 # Kerberos Authentication
          - 123 # NTP
          - 137-138 # Netlogon 
          - 389 # LDAP 
          - 445 # SMB
          - 464 # Kerberos Authentication
          - 1024-65535 # Ephemeral RPC ports
        cidr_ip: 10.0.0.0/16
    rules_egress:
      - proto: -1 
        cidr_ip: 0.0.0.0/0
    vpc_id: "{{ demo_vpc.vpc.id }}"
    tags:
      Name: "ansible-sec-group"
      demo: Ansible 

- name: Create a subnet on the VPC for our apps
  amazon.aws.ec2_vpc_subnet:
    profile: "{{ aws_profile }}"
    state: present
    vpc_id: "{{ demo_vpc.vpc.id }}"
    cidr: 10.0.0.0/16
    map_public: yes
    tags:
      Name: "ansible-subnet"
      demo: Ansible 
  register: demo_subnet

- name: Create a subnet route table 
  community.aws.ec2_vpc_route_table:
    profile: "{{ aws_profile }}"
    state: present 
    vpc_id: "{{ demo_vpc.vpc.id }}"
    subnets:
      - "{{ demo_subnet.subnet.id }}"
    routes:
      - dest: 0.0.0.0/0 
        gateway_id: "{{ gateway.gateway_id }}"
    tags: 
      Name: "ansible-vpc-rtbl"
      demo: Ansible 
    
- name: Generate AWS Keypair 
  amazon.aws.ec2_key: 
    profile: "{{ aws_profile }}"
    name: "ansible-demo-key"
    key_material: "{{ public_key }}"
    state: present
