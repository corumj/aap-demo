---
- name: Setup Controller infrastructure 
  hosts: localhost
  connection: local 
  gather_facts: no
  vars:
    server_env: "test" 
    server_os: "linux"
    business_domain_name: "Red Hat"
    aws_instance_type: m4.xlarge

  tasks: 
    - name: Setup AWS
      include_role:
        name: aws-infra-setup    

    - name: Get AWS infra info 
      include_role:
        name: aws-infra-info

    - name: call role to create RHEL 8 servers for AAP
      include_role:
        name: aws-aap-infra 

    - name: Wait for provisioning to complete
      pause:
        seconds: 30

# There's a problem here when reinstalling to the same environment without using the teardown role
# to revoke the certificates.  If the installer errors, you can remove all but the acme_key and
# cert_key files in the generated_files directory.

    # - name: Prepare certificates directory 
    #   file: 
    #     name: "{{ playbook_dir }}/generated_files"
    #     state: "{{ item }}" 
    #   loop:
    #     - absent
    #     - directory

    - meta: refresh_inventory

    - name: Prepare certificate challenges for Controller, SSO, and Catalog 
      include_role:
        name: certificates
        tasks_from: prepare-challenge.yml 

    - name: Prepare route53 DNS for challenge
      include_role:
        name: certificates
        tasks_from: set-dns-challenge.yml

    - name: Validate DNS challenges 
      include_role: 
        name: certificates
        tasks_from: validate-challenge.yml

    - name: Create SSO Java Keystore 
      java_keystore:
        name: sso
        certificate: "{{ lookup('file', '{{ playbook_dir }}/generated_files/{{ sso_dns }}_chain') }}"
        private_key: "{{ lookup('file', '{{ playbook_dir }}/generated_files/cert_key') }}"
        password: "{{ admin_password }}"
        dest: "{{ playbook_dir }}/generated_files/sso.jks"

    - name: Setup AWS Route 53 for TLS 
      include_role:
        name: certificates 
        tasks_from: set-dns.yml 

- name: Register with RHSM and update 
  hosts: all 
  become: yes 

  tasks: 
    - name: Register servers to RHSM 
      include_role:
        name: rhsm 
        tasks_from: register.yml

    - name: Make sure repositories are allowed to be managed from subscription-manager 
      shell: subscription-manager config --rhsm.manage_repos=1 

    - name: Enable jb-eap repo 
      rhsm_repository:
        name: jb-eap-7.3-for-rhel-8-x86_64-rpms
        state: enabled 
        
    - name: Update servers 
      dnf: 
        name: '*'
        state: latest 

- name: Generate Controller SSH Key pair 
  hosts: demo_controller 

  tasks: 
    - name: Generate an OpenSSH keypair
      community.crypto.openssh_keypair:
        path: /home/{{ ansible_user }}/.ssh/controller_id_rsa

    - name: Fetch the controller SSH key 
      ansible.builtin.fetch:
        src: /home/{{ ansible_user }}/.ssh/controller_id_rsa.pub
        dest: "{{ playbook_dir }}/generated_files/"
        flat: yes

- name: Add Controller ssh key to authorized keys for AAP hosts 
  hosts: aws_ec2

  tasks:
    - name: Set authorized key taken from file
      ansible.posix.authorized_key:
        user: ec2-user
        state: present
        key: "{{ lookup('file', '{{ playbook_dir }}/generated_files/controller_id_rsa.pub') }}"

    - name: Create directory for AAP certs 
      ansible.builtin.file: 
        path: ~/aap
        state: directory 

    - name: Copy certificates and keys 
      ansible.builtin.copy: 
        src: "{{ playbook_dir }}/generated_files/" 
        dest: ~/aap/generated_files   

- name: Install Automation Controller, SSO, Automation Hub and Services Catalog 
  hosts: demo_controller 

  tasks:
    - name: Create directory for AAP install 
      ansible.builtin.file: 
        path: ~/aap
        state: directory 

    - name: Copy installer 
      ansible.builtin.copy: 
        src: aap.tar.gz 
        dest: ~/aap/aap.tar.gz 

    - name: Copy ansible.cfg 
      ansible.builtin.copy: 
        src: ansible.cfg 
        dest: ~/aap/ansible.cfg    

    - name: Copy certificates and keys 
      ansible.builtin.copy: 
        src: "{{ playbook_dir }}/generated_files/" 
        dest: ~/aap/generated_files   

    - name: Extract tar.gz 
      ansible.builtin.unarchive: 
        src: ~/aap/aap.tar.gz 
        dest: ~/aap 
        extra_opts: ['--strip-components=1', '--show-stored-names']
        remote_src: yes 

    - name: template inventory file for AAP install 
      ansible.builtin.template:
        src: "controller_install.j2"
        dest: "/home/ec2-user/aap/inventory"

    - name: run the Automation Controller installer
      shell: "sudo ANSIBLE_BECOME_METHOD='sudo' ANSIBLE_BECOME=True ./setup.sh -e gpgcheck=0 -e create_preload_data=False -- -vvv"
      args:
        chdir: "/home/ec2-user/aap"
      async: 2800
      poll: 30

    - name: wait for Automation Controller to be up
      uri:
        url: https://{{ hostvars[groups['demo_controller'][0]]['public_dns_name'] }}/api/v2/ping/
        method: GET
        user: admin
        password: "{{ admin_password }}"
        validate_certs: false
      register: check2
      until: check2.json is defined and check2.json.instances[0].capacity > 0 and check2.json.instance_groups[0].capacity > 0
      retries: 60
      delay: 10

    - name: Load manifest into variable
      local_action:
        module: slurp
        src: "{{ playbook_dir }}/manifest.zip"
      register: manifest_file

    - name: Post manifest file
      uri:
        url: https://{{ hostvars[groups['demo_controller'][0]]['public_dns_name'] }}/api/v2/config/
        method: POST
        user: admin
        password: "{{ admin_password }}"
        body: '{ "eula_accepted": true, "manifest": "{{ manifest_file.content }}" }'
        body_format: json
        validate_certs: false
        force_basic_auth: true

    - name: Access Apps 
      debug:
        msg: 
          - "Automation Controller: https://{{ controller_dns }} "
          - "Automation Hub: https://{{ hub_dns }} "
          - "Automation Services Catalog: https://{{ catalog_dns }} "
          - "SSO: https://{{ sso_dns }}:8443 "